/*
 * @lc app=leetcode.cn id=190 lang=golang
 *
 * [190] 颠倒二进制位
 */

// @lc code=start

// 将n视作一个长为32的二进制串，从低位往高位枚举num的每一位，将其倒序添加到翻转结果res中。
// 每枚举一位就将num右移一位，这样当前num的最低位就是我们要枚举的比特位。当num为0时即可结束循环。
func reverseBits(num uint32) uint32 {
	var res uint32
	for i := 0; i < 32 && num > 0; i++ {
		// 从低位到高位
		// 1<<是无符号左移，低位补0，也就是每次<<都乘以2
		// &是与，两个都为1则为1，用1&则说明如果本来是1则还是1，本来是0则还是0
		// ｜是或，如果两个都为0则为0，有一个是1则为1
		res |= num & 1 << (31 - i)
		// >>无符号右移，高位补0，也就是每次>>都除以2
		// 每次枚举一位就将num右移一位，这样当前num的最低位就是我们要枚举的比特位
		num >>= 1
	}
	return res
}

// @lc code=end

