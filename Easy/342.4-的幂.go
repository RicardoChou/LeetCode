/*
 * @lc app=leetcode.cn id=342 lang=golang
 *
 * [342] 4的幂
 */

// @lc code=start
// 如果n是4的幂，那么n的二进制表示中有且仅有一个1，并且这个1出现在从低位开始的第偶数个二进制位上（这是因为这个1后面必须有偶数个0）。
// 这里我们规定最低位为第0位，例如n=16时，n的二进制表示为(10000)2
// ​唯一的1出现在第4个二进制位上，因此n是4的幂。
// 由于题目保证了n是一个32位的有符号整数，因此我们可以构造一个整数mask，
// 它的所有偶数二进制位都是0，所有奇数二进制位都是1。这样一来，我们将n和mask 进行按位与运算，如果结果为0
// 说明n二进制表示中的1出现在偶数的位置，否则说明其出现在奇数的位置。
// 根据上面的思路，mask 的二进制表示为：
// mask=(10101010101010101010101010101010)2
// ​我们也可以将其表示成 1616 进制的形式，使其更加美观：
// mask=(AAAAAAAA)16

func isPowerOfFour(n int) bool {
	// 首先大于0，然后4的幂次肯定是2的幂次
	return n > 0 && n&(n-1) == 0 && n&0xaaaaaaaa == 0
}

// @lc code=end

