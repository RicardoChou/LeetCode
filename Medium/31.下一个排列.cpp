/*
 * @lc app=leetcode.cn id=31 lang=cpp
 *
 * [31] 下一个排列
 */

// @lc code=start
class Solution
{
public:
    /**
 * 1.我们希望下一个数比当前数大，这样才满足“下一个排列”的定义。
 * 因此只需要将后面的「大数」与前面的「小数」交换，就能得到一个更大的数。
 * 比如 123456，将 5 和 6 交换就能得到一个更大的数 123465。
 * 2.我们还希望下一个数增加的幅度尽可能的小，这样才满足“下一个排列与当前排列紧邻“的要求。
 * 为了满足这个要求，我们需要：
 * 1.在尽可能靠右的低位进行交换，需要从后向前查找
 * 2.将一个 尽可能小的「大数」 与前面的「小数」交换。
 * 比如 123465，下一个排列应该把 5 和 4 交换而不是把 6 和 4 交换
 * 3.将「大数」换到前面后，需要将「大数」后面的所有数重置为升序，升序排列就是最小的排列。
 * 可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
 * 以 123465 为例：首先按照上一步，交换 5 和 4，得到 123564；
 * 然后需要将 5 之后的数重置为升序，得到 123546。显然 123546 比 123564 更小，
 * 123546 就是 123465 的下一个排列
 */
    void nextPermutation(vector<int> &nums)
    {
        int i = nums.size() - 2;
        //从后往前扫描找到第一个升序的一组数
        while (i >= 0 && nums[i + 1] <= nums[i])
        {
            i--;
        }
        //如果指针i没有扫描到最左端，也就是说整个数组不是降序
        if (i >= 0)
        {
            int j = nums.size() - 1;
            //再从后往前找到比nums[i]尽可能小的「大数」，将其两者进行交换
            while (j >= 0 && nums[j] <= nums[i])
            {
                j--;
            }
            swap(nums[i], nums[j]);
        }
        //可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
        reverse(nums, i + 1);
    }
    void reverse(vector<int> &nums, int start)
    {
        int i = start, j = nums.size() - 1;
        while (i < j)
        {
            swap(nums[i], nums[j]);
            i++;
            j--;
        }
    }
};
// @lc code=end
